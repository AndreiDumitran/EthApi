"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var querystring = __importStar(require("query-string"));
var utils_1 = require("./utils");
var CoinGeckoAPI = /** @class */ (function () {
    function CoinGeckoAPI() {
        this.axios = utils_1.API_CONNECTOR;
    }
    CoinGeckoAPI.prototype.ping = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'ping';
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Simple Endpoints
    /**
     *
     * @param {SimplePriceParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.simple = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'simple/price';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id - (required) The ID of the platform to fetch
     * @param {SimpleTokenPriceParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.simpleTokenPrice = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'The id of the platform issuing tokens is required example: "binance-smart-chain"');
                        method = 'simple/token_price/' + id;
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CoinGeckoAPI.prototype.supportedCurrencies = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'simple/supported_vs_currencies';
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Coin Endpoints
    /**
     *
     * @param {CoinListParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.coinList = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'coins/list';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *
     * @param {CoinMarketParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.coinMarkets = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'coins/markets';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {CoinsParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.coins = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'The ID of the coin is required e.g. Bitcoin.');
                        method = 'coins/' + id;
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {CoinsTickersParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.coinTickers = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'The ID of the coin is required e.g. Bitcoin.');
                        method = 'coins/' + id + '/tickers';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param date (required) Pass data of data snapshot dd-mm-yyyy e.g. 30-12-2017
     * @param {CoinsHistoryParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.coinHistory = function (id, date, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(date, 'Date must conform to this standard: dd-mm-yyyy e.g. 30-12-2017');
                        assert_1.default(id, 'The ID of the coin is required e.g. Bitcoin.');
                        method = 'coins/' + id + '/history?date=' + date;
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {CoinsMarketChartParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.coinMarketChart = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'The ID of the coin is required e.g. Bitcoin.');
                        method = 'coins/' + id + '/market_chart';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {MarketChartRangeBaseParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.coinMarketChartRange = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'The ID of the coin is required e.g. Bitcoin.');
                        method = 'coins/' + id + '/market_chart/range';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {CoinOhlcParams} params - Object to pass through
     */
    CoinGeckoAPI.prototype.coinOHLC = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'The ID of the coin is required e.g. Bitcoin.');
                        method = 'coins/' + id + '/ohlc';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Contract Endpoints
    /**
     * @param id (required) Asset Platform e.g. binance-smart-chain
     * @param contract_address - Token's Contract Address
     */
    CoinGeckoAPI.prototype.contractInformation = function (id, contract_address) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'The ID of said asset platform e.g. binance-smart-chain');
                        method = 'coins/' + id + '/contract/' + contract_address;
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) Asset Platform e.g. binance-smart-chain
     * @param contract_address - Token's Contract Address
     * @param {MarketChartBaseParams} - Object to pass through
     */
    CoinGeckoAPI.prototype.contractMarketChart = function (id, contract_address, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'The ID of said asset platform e.g. binance-smart-chain.');
                        assert_1.default(contract_address, 'Token contract address required.');
                        method = 'coins/' + id + '/contract/' + contract_address + '/market_chart';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) Asset Platform e.g. binance-smart-chain
     * @param contract_address - Token's Contract Address
     * @param {MarketChartRangeBaseParams} - Object to pass through
     */
    CoinGeckoAPI.prototype.contractMarketChartRange = function (id, contract_address, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'The ID of said asset platform e.g. binance-smart-chain.');
                        assert_1.default(contract_address, 'Token contract address required.');
                        method = 'coins/' + id + '/contract/' + contract_address + '/market_chart/range';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Asset Platforms Endpoint
    CoinGeckoAPI.prototype.assetPlatforms = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'asset_platforms';
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Categories Endpoints
    CoinGeckoAPI.prototype.categoriesList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'coins/categories/list';
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {CategoriesOrderParams} - Object to pass through
     */
    CoinGeckoAPI.prototype.categoriesListMarketData = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'coins/categories';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Exchanges Endpoints
    /**
     * @param {PageBaseParams} - Object to pass through
     */
    CoinGeckoAPI.prototype.exchanges = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'exchanges';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CoinGeckoAPI.prototype.exchangesList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'exchanges/list';
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) ID of the exchange e.g. binance
     */
    CoinGeckoAPI.prototype.exchangesById = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'Pass the exchange ID e.g. binance');
                        method = 'exchanges/' + id;
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) ID of the exchange e.g. binance
     * @param {ExchangesTickersParams} - Object to pass through
     */
    CoinGeckoAPI.prototype.exchangeTickers = function (id, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'Pass the exchange ID e.g. binance');
                        method = 'exchanges/' + id + '/tickers';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param id (required) ID of the exchange e.g. binance
     * @param days (required) Data up to number of days ago (eg. 1,14,30)
     */
    CoinGeckoAPI.prototype.exchangesVolumeChart = function (id, days) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'Pass the exchange ID e.g. binance');
                        method = 'exchanges/' + id + '/volume_chart?days=' + days;
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Finance Endpoints
    /**
     * @param {FinanceProductParams} params - Object to pass in
     */
    CoinGeckoAPI.prototype.financeProducts = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'finance_products';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Indexes Endpoints
    /**
     * @param {PageBaseParams} params - Object to pass in
     */
    CoinGeckoAPI.prototype.indexes = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'indexes';
                        return [4 /*yield*/, this.get(method, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param market_id - Pass the market id (can be obtained from ./exchanges/list)
     * @param id - Pass the index id (can be obtained from ./indexes/list)
     */
    CoinGeckoAPI.prototype.indexesByMarketIndexId = function (market_id, id) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.default(id, 'Pass the index id (can be obtained from /indexes/list)');
                        assert_1.default(market_id, 'Pass the market id (can be obtained from ./exchanges/list)');
                        method = 'indexes/' + market_id + '/' + id;
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CoinGeckoAPI.prototype.indexesList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'indexes/list';
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     *
     * @param {CompaniesHoldings} coin_id - bitcoin or ethereum
     */
    CoinGeckoAPI.prototype.companies = function (coin_id) {
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'companies/public_treasury/' + coin_id;
                        return [4 /*yield*/, this.get(method)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Get and path builder functions
    CoinGeckoAPI.prototype.get = function (method, params) {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = this.build_request_path(method, params);
                        return [4 /*yield*/, this.axios.get(endpoint)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    CoinGeckoAPI.prototype.build_request_path = function (path, params) {
        var queryParams = '';
        if (Array.isArray(params === null || params === void 0 ? void 0 : params.ids) && (params === null || params === void 0 ? void 0 : params.ids)) {
            params.ids = params.ids.join(',');
        }
        if (Array.isArray(params === null || params === void 0 ? void 0 : params.contract_addresses) &&
            (params === null || params === void 0 ? void 0 : params.contract_addresses)) {
            params.contract_addresses = params.contract_addresses.join(',');
        }
        if (typeof params === 'object') {
            queryParams = querystring.stringify(params);
        }
        path = queryParams ? "/" + path + "?" + queryParams : "/" + path;
        return path;
    };
    return CoinGeckoAPI;
}());
exports.default = CoinGeckoAPI;
//# sourceMappingURL=index.js.map