import type { CoinListParams, CoinMarketParams, CoinsParams, CoinsTickersParams, SimplePriceParams, CoinsHistoryParams, SimpleTokenPriceParams, CoinsMarketChartParams, MarketChartRangeBaseParams, PageBaseParams, CoinOhlcParams, MarketChartBaseParams, CategoriesOrderParams, ExchangesTickersParams, FinanceProductParams, CompaniesHoldings } from './types';
export default class CoinGeckoAPI {
    private axios;
    constructor();
    ping(): Promise<any>;
    /**
     *
     * @param {SimplePriceParams} params - Object to pass through
     */
    simple(params: SimplePriceParams): Promise<any>;
    /**
     * @param id - (required) The ID of the platform to fetch
     * @param {SimpleTokenPriceParams} params - Object to pass through
     */
    simpleTokenPrice(id: string, params: SimpleTokenPriceParams): Promise<any>;
    supportedCurrencies(): Promise<any>;
    /**
     *
     * @param {CoinListParams} params - Object to pass through
     */
    coinList(params?: CoinListParams): Promise<any>;
    /**
     *
     * @param {CoinMarketParams} params - Object to pass through
     */
    coinMarkets(params?: CoinMarketParams): Promise<any>;
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {CoinsParams} params - Object to pass through
     */
    coins(id: string, params?: CoinsParams): Promise<any>;
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {CoinsTickersParams} params - Object to pass through
     */
    coinTickers(id: string, params?: CoinsTickersParams): Promise<any>;
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param date (required) Pass data of data snapshot dd-mm-yyyy e.g. 30-12-2017
     * @param {CoinsHistoryParams} params - Object to pass through
     */
    coinHistory(id: string, date: string, params?: CoinsHistoryParams): Promise<any>;
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {CoinsMarketChartParams} params - Object to pass through
     */
    coinMarketChart(id: string, params: CoinsMarketChartParams): Promise<any>;
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {MarketChartRangeBaseParams} params - Object to pass through
     */
    coinMarketChartRange(id: string, params: MarketChartRangeBaseParams): Promise<any>;
    /**
     * @param id (required) Pass the coin id e.g. bitcoin.
     * @param {CoinOhlcParams} params - Object to pass through
     */
    coinOHLC(id: string, params: CoinOhlcParams): Promise<any>;
    /**
     * @param id (required) Asset Platform e.g. binance-smart-chain
     * @param contract_address - Token's Contract Address
     */
    contractInformation(id: string, contract_address: string): Promise<any>;
    /**
     * @param id (required) Asset Platform e.g. binance-smart-chain
     * @param contract_address - Token's Contract Address
     * @param {MarketChartBaseParams} - Object to pass through
     */
    contractMarketChart(id: string, contract_address: string, params: MarketChartBaseParams): Promise<any>;
    /**
     * @param id (required) Asset Platform e.g. binance-smart-chain
     * @param contract_address - Token's Contract Address
     * @param {MarketChartRangeBaseParams} - Object to pass through
     */
    contractMarketChartRange(id: string, contract_address: string, params: MarketChartRangeBaseParams): Promise<any>;
    assetPlatforms(): Promise<any>;
    categoriesList(): Promise<any>;
    /**
     * @param {CategoriesOrderParams} - Object to pass through
     */
    categoriesListMarketData(params?: CategoriesOrderParams): Promise<any>;
    /**
     * @param {PageBaseParams} - Object to pass through
     */
    exchanges(params?: PageBaseParams): Promise<any>;
    exchangesList(): Promise<any>;
    /**
     * @param id (required) ID of the exchange e.g. binance
     */
    exchangesById(id: string): Promise<any>;
    /**
     * @param id (required) ID of the exchange e.g. binance
     * @param {ExchangesTickersParams} - Object to pass through
     */
    exchangeTickers(id: string, params?: ExchangesTickersParams): Promise<any>;
    /**
     * @param id (required) ID of the exchange e.g. binance
     * @param days (required) Data up to number of days ago (eg. 1,14,30)
     */
    exchangesVolumeChart(id: string, days: number): Promise<any>;
    /**
     * @param {FinanceProductParams} params - Object to pass in
     */
    financeProducts(params?: FinanceProductParams): Promise<any>;
    /**
     * @param {PageBaseParams} params - Object to pass in
     */
    indexes(params?: PageBaseParams): Promise<any>;
    /**
     * @param market_id - Pass the market id (can be obtained from ./exchanges/list)
     * @param id - Pass the index id (can be obtained from ./indexes/list)
     */
    indexesByMarketIndexId(market_id: string, id: string): Promise<any>;
    indexesList(): Promise<any>;
    /**
     *
     * @param {CompaniesHoldings} coin_id - bitcoin or ethereum
     */
    companies(coin_id: CompaniesHoldings): Promise<any>;
    private get;
    private build_request_path;
}
